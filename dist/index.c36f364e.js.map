{"mappings":"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","sources":["index.js"],"sourcesContent":["\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n\r\nlet phiChart;\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCaewNUV7i50S4DYMVgzBLVg2Rc8dJpmLk\",\r\n  authDomain: \"phi-of-t.firebaseapp.com\",\r\n  projectId: \"phi-of-t\",\r\n  storageBucket: \"phi-of-t.appspot.com\",\r\n  messagingSenderId: \"134964093529\",\r\n  appId: \"1:134964093529:web:9537a8951d77d4ceac8748\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Initialize Firestore\r\nconst firestore = firebase.firestore();\r\n\r\n// Select the registration form elements\r\nconst registerButton = document.getElementById('register-button');\r\nconst registerForm = document.getElementById('register-form');\r\nconst registerEmailInput = document.getElementById('register-email');\r\nconst registerPasswordInput = document.getElementById('register-password');\r\nconst submitRegisterButton = document.getElementById('submit-register');\r\n\r\n// Attach click event listeners to the register button and submit button\r\nregisterButton.addEventListener('click', () => {\r\n  registerForm.style.display = 'block';\r\n});\r\nsubmitRegisterButton.addEventListener('click', registerWithEmailAndPassword);\r\n\r\n// Existing event listeners for sign-in, registration, etc.\r\n\r\nconst backButton = document.getElementById('back-button');\r\nbackButton.style.display = 'none'; // Hide the \"Back\" button initially\r\n\r\nbackButton.addEventListener('click', () => {\r\n  document.getElementById('phi-chart-container').style.display = 'none';\r\n  document.getElementById('app').style.display = 'block';\r\n  backButton.style.display = 'none';\r\n\r\n});\r\n\r\nconst viewPhiButton = document.getElementById('view-phi-button');\r\nviewPhiButton.addEventListener('click', () => {\r\n  document.getElementById('app').style.display = 'none';\r\n  document.getElementById('phi-chart-container').style.display = 'block';\r\n  backButton.style.display = 'block'; // Ensure this line is here to show the button\r\n\r\n  displayPhiValues(); // Make sure this function fetches and displays the graph\r\n});\r\n\r\n\r\n// Register with email and password function\r\nfunction registerWithEmailAndPassword() {\r\n  const email = registerEmailInput.value;\r\n  const password = registerPasswordInput.value;\r\n  firebase.auth().createUserWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n      // User registered successfully\r\n      const user = userCredential.user;\r\n      console.log('User registered:', user);\r\n      registerForm.style.display = 'none';\r\n    })\r\n    .catch((error) => {\r\n      // An error occurred during registration\r\n      console.error('Error registering:', error);\r\n    });\r\n}\r\n\r\nasync function fetchAndDisplayAveragePhi() {\r\n  const user = firebase.auth().currentUser;\r\n  if (!user) {\r\n    console.log('User not signed in');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const phiValuesSnapshot = await firestore.collection('phi-values')\r\n      .where('uid', '==', user.uid)\r\n      .get();\r\n\r\n    let totalPhi = 0;\r\n    let count = 0;\r\n    phiValuesSnapshot.forEach(doc => {\r\n      const phiValue = parseFloat(doc.data().phi); // Convert phi value to a number\r\n      if (!isNaN(phiValue)) { // Check if the conversion result is a valid number\r\n        totalPhi += phiValue;\r\n        count++;\r\n      } else {\r\n        console.error('Invalid phi value encountered:', doc.data().phi);\r\n      }\r\n    });\r\n\r\n    // Debugging statement to verify totalPhi and count\r\n    console.log(`Total Phi: ${totalPhi}, Count: ${count}`);\r\n\r\n    const averagePhi = count > 0 ? (totalPhi / count).toFixed(2) : 'No data';\r\n    document.getElementById('average-phi').innerText = `Your average Phi is ${averagePhi}`;\r\n  } catch (error) {\r\n    console.error('Error fetching Phi values:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Select the form elements\r\nconst signInButton = document.getElementById('sign-in-button');\r\nconst signInForm = document.getElementById('sign-in-form');\r\nconst emailInput = document.getElementById('email');\r\nconst passwordInput = document.getElementById('password');\r\nconst submitSignInButton = document.getElementById('submit-sign-in');\r\nconst phiForm = document.getElementById('phi-form');\r\nconst phiValueInput = document.getElementById('phi-value');\r\nconst submitPhiButton = document.getElementById('submit-phi');\r\n\r\n// Attach click event listeners to the sign-in button and submit button\r\nsignInButton.addEventListener('click', () => {\r\n  signInForm.style.display = 'block';\r\n});\r\nsubmitSignInButton.addEventListener('click', signInWithEmailAndPassword);\r\n\r\n// Sign in with email and password function\r\nfunction signInWithEmailAndPassword() {\r\n  const email = emailInput.value;\r\n  const password = passwordInput.value\r\n  firebase.auth().signInWithEmailAndPassword(email, password)\r\n    .then((userCredential) => {\r\n      // User signed in successfully\r\n      const user = userCredential.user;\r\n      console.log('User signed in:', user);\r\n      signInForm.style.display = 'none';\r\n    })\r\n    .catch((error) => {\r\n      // An error occurred during sign-in\r\n      console.error('Error signing in:', error);\r\n    });\r\n}\r\n\r\n// Check for user state changes\r\nfirebase.auth().onAuthStateChanged((user) => {\r\n  if (user) {\r\n    // User is signed in\r\n    console.log('User is signed in:', user);\r\n    signInButton.style.display = 'none';\r\n    phiForm.style.display = 'block';\r\n    fetchAndDisplayAveragePhi();\r\n  } else {\r\n    // User is signed out\r\n    console.log('User is signed out');\r\n    signInButton.style.display = 'block';\r\n    phiForm.style.display = 'none';\r\n  }\r\n  document.getElementById('app').style.display = 'block';\r\n\r\n});\r\n\r\n// Attach a click event listener to the submit button\r\nsubmitPhiButton.addEventListener('click', savePhiValue);\r\n\r\n// Save the Phi value and timestamp to Firestore\r\nasync function savePhiValue() {\r\n  const user = firebase.auth().currentUser;\r\n\r\n  if (!user) {\r\n    alert('Please sign in to submit Phi value');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const phiValue = parseFloat(phiValueInput.value);\r\n    const timestamp = new Date();\r\n    await firestore.collection('phi-values').add({\r\n      uid: user.uid,\r\n      phi: phiValue,\r\n      timestamp: timestamp,\r\n    });\r\n    console.log('Phi value saved successfully');\r\n    alert('Phi value saved successfully');\r\n  } catch (error) {\r\n    console.error('Error saving Phi value:', error);\r\n    alert('Error saving Phi value');\r\n  }\r\n}\r\nconst phiChartElement = document.getElementById('phi-chart');\r\n\r\n\r\n// Fetch and display the Phi values\r\nasync function displayPhiValues(days = 7) { // Default to last 7 days\r\n  const user = firebase.auth().currentUser;\r\n  if (!user) {\r\n    console.log('User not signed in');\r\n    return;\r\n  }\r\n\r\n  const startDate = new Date();\r\n  startDate.setDate(startDate.getDate() - days); // Calculate the start date based on the selected timescale\r\n\r\n  let query = firestore.collection('phi-values')\r\n    .where('uid', '==', user.uid)\r\n    .orderBy('timestamp', 'asc');\r\n\r\n  // Adjust the query based on the timescale\r\n  if (days > 0) { // For a specific timescale\r\n    query = query.where('timestamp', '>=', startDate);\r\n  } // If days = 0, it means \"All Time\", so no additional query constraint is needed\r\n\r\n  try {\r\n    const phiValuesSnapshot = await query.get();\r\n    const phiData = phiValuesSnapshot.docs.map(doc => ({\r\n      phi: doc.data().phi,\r\n      timestamp: doc.data().timestamp.toDate(),\r\n    }));\r\n\r\n    createChart(phiData); // Call the function to create/update the chart with the fetched data\r\n  } catch (error) {\r\n    console.error('Error fetching Phi values:', error);\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction createChart(phiData) {\r\n  console.log('createChart was called');\r\n  const ctx = phiChartElement.getContext(\"2d\");\r\n\r\n  if (phiChart) {\r\n      phiChart.destroy();\r\n  }\r\n\r\n  const labels = phiData.map((data) => data.timestamp);\r\n  const dataPoints = phiData.map((data) => data.phi);\r\n\r\n  // In a non-modular environment, you don't need to manually register the components\r\n  // as they are already registered when you include Chart.js via a script tag\r\n\r\n  phiChart = new Chart(ctx, {\r\n      type: 'line',\r\n      data: {\r\n          labels: labels,\r\n          datasets: [{\r\n              label: 'Phi(t)',\r\n              data: dataPoints,\r\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n              borderColor: 'rgba(75, 192, 192, 1)',\r\n              borderWidth: 2,\r\n              borderDash: [5, 5], // Optional: creates a dashed line\r\n              pointRadius: 5, // Larger point radius for emphasis\r\n              pointHoverRadius: 8, // Larger radius on hover\r\n              pointBackgroundColor: 'rgba(75, 192, 192, 1)', // Point color\r\n              pointBorderColor: \"#fff\", // Border color of points\r\n              pointBorderWidth: 2, // Width of the border around each point\r\n              showLine: true, // Set this to false if you want to completely hide the li\r\n          }]\r\n      },\r\n      options: {\r\n          scales: {\r\n              x: {\r\n                  type: 'time',\r\n                  time: {\r\n                      parser: 'date-fns', // <- Make sure you have included the date-fns adapter correctly\r\n                      unit: 'day',\r\n                      displayFormats: {\r\n                          day: 'MMM d',\r\n                      },\r\n                      tooltipFormat: 'MMM d, yyyy',\r\n                      minUnit: 'day',\r\n                  },\r\n                  ticks: {\r\n                      source: 'data',\r\n                  },\r\n              },\r\n              y: {\r\n                  min: -20,\r\n                  max: 20,\r\n              }\r\n          }\r\n      }\r\n  });\r\n  console.log('Chart instance created', phiChart);\r\n  phiChartElement.style.display = \"block\";\r\n}\r\n\r\n\r\ndocument.getElementById('apply-time-frame').addEventListener('click', () => {\r\n  const selectedTimeFrame = parseInt(document.getElementById('time-frame-select').value, 10);\r\n  displayPhiValues(selectedTimeFrame);\r\n});\r\n}\r\n)\r\n"],"names":[],"version":3,"file":"index.c36f364e.js.map","sourceRoot":"/__parcel_source_root/"}